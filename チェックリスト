🔴Route
Q ルートネームは何のために定義しているか
A ルートに一意の名前を付ける事でURLの変更などがスムーズに行えます。

Q ルートネームは何のために定義しているかルートパラメータを使用することで何ができるか
A 指定したルートにアクセスができるようにします。
  IDなどのパラメータを含んだURLを生成、それを利用して特定のリソースにアクセスできる。


🔴Controller
Q なぜTodoインスタンスをコンストラクタで$this->todoに格納するのか
A Todo インスタンスをコンストラクタで $this->todo に格納することで、TodoController各メソッドで同じ
  Todo インスタンスを使い回すことができます
  
Q なぜ$request->all()しているのか
A HTTP リクエストに含まれるすべての入力データを配列として返すメソッドです。
  このメソッドは、フォームから送信されたフィールドや値、クエリ文字列を含むリクエストの内容を取得します。
  store() メソッドで $request->all() を使用することで、フォームから送信されたデータを取得し、
  データベースに保存するための情報を抽出しています。これにより、フォームに入力されたデータが、
  データベースのモデルに適切に移行されます。
  

🔴Model
Q Modelとは
A データベースのデータ操作をするために必要
  基本的にモデルとテーブルは１対１の関係になる。

Q Eloquentとは
A Laravelに搭載されたテーブルとデータベースを関連付ける機能
  関連付けた結果どう返ってくるのか→関連付けられたモデルのインスタンス


Q なぜfillableプロパティにcontentと指定する必要があったか
A Todoモデルはtodosテーブルに関連付けられており
  fillableでcontent属性のみ設定する事で
  他の属性id、created_at、updated_atなどには直接値を割り当てることができません。
  これにより、不正なデータの挿入やセキュリティリスクが軽減されます。

Q 配列と比較したときのCollectionインスタンスの優位性は何か
A Collectionは、配列に出来る事は出来る上に便利なメソッドを多数提供しています。
  例えば、map、filter、reduce、sortByなど、
  配列をより柔軟に操作するためのメソッドが含まれています。
  これにより、データを効率的かつ簡潔に処理することができます。



🔴View
Q なぜBladeを分割するのか
A コードの再利用性、可読性。またメンテナンスが容易になります

Q {{ }} と {!! !!} をどのように使い分けるのか
A {{ }}: デフォルトでエスケープされた出力を生成します。
  一般的にユーザーからの入力を表示する場合に使用されます
  {!! !!}: データをエスケープせずにそのまま出力します。
  信頼できるソースからのみ使用します

Q @csrfと書くだけでなぜCSRF対策になるのか
A @csrf ディレクティブをフォーム内に配置すると、Laravelは自動的にそのフォームのCSRFトークンを生成し、
フォーム内の隠しフィールドに挿入します。これにより、フォーム送信時にトークンが一致しない場合、
リクエストは拒否され、CSRF攻撃からアプリケーションが保護されます。

Q @includeは何をする記述なのか
A @include ディレクティブは、Bladeテンプレート内で他のBladeテンプレートを読み込むために使用されます。
  これにより、同じコードを再利用してコンポーネント化することができます。


Q Bladeのようなテンプレートエンジンを使うことでどのようなメリットがあるか
A Bladeはシンプルで直感的な構文を持っています。HTMLに埋め込まれたディレクティブや変数は、読みやすく、編集しやすいです。
  自動でエスケープを行う為、セキュリティ面でも優れています。



🔴その他
Q なぜテーブル構成をマイグレーションファイルで管理するのか
A バージョン管理と履歴の追跡:
  バージョン管理システム（例えば、Git）で追跡できます。各マイグレーションファイルは、特定の変更の単位として識別され、
  データベースス変更履歴を明確にする事が出来ます。

Q .envファイルはどのような役割を持っているか
A 開発や本番など環境ごとに変わるDB情報やGitで管理したくないパスワードなどプロジェクトの設定を書いたファイルです。

Q バリデーションはいつ実行されているか
A フォームリクエストの処理時（リクエストがコントローラーのアクションに到達する前）
  コントローラーのアクション内での手動実行
  のどちらか

Q フレームワークを使った時と使わなかった時で、ToDoアプリ開発にはどんな違いがあるか
A 開発速度→基本的な機能や構造が予め用意されています
  セキュリティ、拡張性、保守性が優れています。



宿題
🔴Route::get・postについて
  httpメソッド
  get サーバーで情報を検索して取得する
  post 更新

🔴view()関数の引数の指定方法
  最初の引数として、ビューファイルのパスを指定します



🔴@section・＠yieldの関係
  @yieldはトンネルを通す穴
  @sectionは@yield部分に召喚されるトンネルの入り口

🔴{{ }}について
  エスケープ処理
  <?phpの役割
  echo

🔴$errorsとany()・all()について
  extends FormRequestの記述で元いたページにリダイレクトしている為
  $errorsが使えるようになる
  any()はエラーがあるかどうか確認していて
  all()でその全てをforeachで取り出している。

🔴TodoRequestのrulesの連想配列のキーに指定するもの
  バリデーションを行いたいフォームの入力フィールドの名前を
  キーとして指定します→formタグのcontentの部分になる。

🔴コンストラクタがいつ実行されるのか
  クラスがインスタンス化される際に必ず実行されます。
 （Todoクラスのインスタンス化）

🔴fill()とsave()は何クラスのメソッドで何をしているか
  Eloquent モデルクラスのメソッドです。
  fillメソッドはモデルの属性を一括して設定します。
  引数として連想配列を受け取り、モデルの各属性に対応する値を設定します。
  saveメソッドはモデルをデータベースに保存します。
  データベースに新しいレコードを挿入する場合は新規作成を、
  既存のレコードを更新する場合は更新を行います。



  🔴$fillableを設定する必要
    指定したカラムのみがfillで一括設定されるようにする為









